% TODO:
%  - breadcrumb config in xml file (y, font, color)
%  - highlight with bold font
%  - checkboxes
%  - i18n/L10n
%  - resolution dependend fonts, indentation and line spacing
%  - icons
%  - help/description
%  - menu entry specific font and line spacing
%  - different alignments (left, center)
%
% test with:
%  $ gfxboot -p -b isolinux -a bootlogo
%

%% include properties.inc
%% include string.inc
%% include video.inc
%% include xml.inc

% - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
% Some constants we probably need.
%
/true 0 0 eq def
/false 0 0 ne def

% some key codes
/keyEsc       0x0000001b def
/keyEnter     0x0000000d def
/keyUp        0x48000000 def
/keyLeft      0x4b000000 def
/keyRight     0x4d000000 def
/keyDown      0x50000000 def

% type values
/t_none  0 def
/t_int   1 def
/t_str   4 def
/t_arr  10 def
/t_end  11 def
/t_ptr  12 def

% undefined (nil) value
/.undef 0 t_none settype def

% end token, stops execution
/.end 0 t_end settype def


% - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
% Convert integer to pointer.
%
% ( int1 -- ptr1 )
%
/cvp { t_ptr settype } def

% - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
% Convert pointer to integer
%
% ( ptr1 -- int1 )
%
/cvn { t_int settype } def

/string {
  1 add malloc 4 settype
} def

/sprintf {
  dup t_ptr settype length exch snprintf
} def

% - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
% Input event handling.
%
% ( key -- input_buffer menu_entry action )
%
% key
%  bit 0-7      ascii
%  bit 8-15     scan code
%  bit 16-32    status bits (ctrl, shift...)
%
% action
%    0:         ok, stay in input loop
%    1:         switch to text mode (that is, continue with the non-gfxboot bootloader interface)
%  >=2:         boot
%
% Notes:
%  - key = 0 indicates the bootloader timeout is up.
%  - input_buffer is the command line that you would have normally entered in the bootloader.
%    note that for syslinux it must start with the menu label string but not for grub
%  - menu_entry is the number of the menu entry you want to boot
%
/KeyEvent {
  % pre-process keycode a bit
  dup 0xff00 and 16 shl exch 0xff and dup 0xe0 eq { pop 0 } if add
  dup 0xff and { 0xff and } if
  /key exch def

  % 'key' now holds the ASCII code for 'normal' keys and the scan code in the
  % upper 8 bits if there is no ASCII code (e.g. F-keys, cursor keys)

  % process key events...
  key keyDown eq {
    menu.selected_index menu.entries menu.index.entries get length 1 sub lt {
      menu.selected_index menu.deselect
      /menu.selected_index menu.selected_index 1 add def
      menu.selected_index menu.select
    } if
  } if

  key keyUp eq {
    menu.selected_index 0 gt {
      menu.selected_index menu.deselect
      /menu.selected_index menu.selected_index 1 sub def
      menu.selected_index menu.select
    } if
  } if

  key keyEnter eq {
    menu.entries menu.index.entries get menu.selected_index get
    % check menu entry type
    dup 0 get
    dup menu.type.start eq {
      pop
      handle_start_menu_entry
      return
    } {
      dup menu.type.config eq {
        pop
        handle_config_menu_entry
      } {
        dup menu.type.option eq {
          pop
          handle_option_menu_entry
        } {
          dup menu.type.menu eq {
            pop
            handle_submenu_entry
          } {
            menu.type.back eq {
              handle_back_entry
            } if
          } ifelse
        } ifelse
     } ifelse
    } ifelse
  } if

 "" 0 0
} def


% - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
% gets the selected index of a config options menu
%
% ( array -- int )
%
% array: the config options menu
%
% int: the selected index
%
/get_selected_option_index {
  0
  exch
  {
    4 get {
      return
    } if
    1 add
  } forall
} def

% - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
% converts a config into a menu structure
%
% ( string -- array )
%
% string: the config id
%
% array: the menu structure
%
/config_to_menu {
  /tmp_config_id exch def
  [
    % type
    menu.type.menu

    % text
    tmp_config_id get_configuration
    dup config.index.text get
    exch

    % options
    [
      % loop over all config options
      exch config.index.options get {
        [
          exch
          % option menus are arrays with the following fields:
          %   0: type == menu.type.option
          %   1: config id (string, config id)
          %   2: option id (string, option id)
          %   3: text (string, config description)
          %   4: selected (boolean)

          % type
          menu.type.option
          exch

          % config id
          tmp_config_id
          exch 

          % option id
          dup 0 get

          % text
          exch dup 1 get

          % selected
          exch 4 get
        ]
      } forall
    ]
  ]
} def

% - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
% handles a start menu entry
%
% ( array -- string int int )
%
% array: the selected start menu entry
%
% string: the label and append line for syslinux
% int: the index for syslinux
% int: the action for syslinux (always 2 == boot)
%
/handle_start_menu_entry {
  % get menu label
  dup 3 get

  % check, if the config should be appended to the label
  exch dup 4 get {
    % yes, append config to label

    % get currently selected config options and
    % assemble them in one large append line
    /append_line 0 string def
    configurations {
      % get options array of config
      config.index.options get {
        % only use selected options
        dup 4 get {
          % option is selected
          % get option specific append line
          2 get
          % concatenate with global append line
          append_line " " concatenate_strings
          exch
          concatenate_strings
          /append_line exch def
        } {
          % option is not selected
          pop
        } ifelse
      } forall
    } forall

    % concatenate label and append line
    exch append_line concatenate_strings
    % get menu entry back to top of stack
    exch
  } if

  % get menu index
  2 get 

  % "2" means that we want to boot
  2
} def

% - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
% handles a config menu entry
%
% ( array -- )
%
% array: the selected config menu entry
%
/handle_config_menu_entry {
  % paint config options menu
  1 get
  config_to_menu
  /menu.entries exch def

  % add config menu to breadcrumbs
  /last_breadcrumb [
    last_breadcrumb
    menu.entries
    menu.selected_index
  ] def

  % repaint menu
  paint_menu

  %find and highlight selected option
  menu.entries menu.index.entries get get_selected_option_index
  /menu.selected_index exch def
  menu.selected_index menu.select
} def

% - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
% handles a config option menu entry
%
% ( array -- )
%
% array: the selected config option menu entry
%
/handle_option_menu_entry {
  % update configuration
  % get option id
  dup 2 get
  % get configuration
  exch 1 get get_configuration
  % get config trigger
  dup config.index.trigger get
  /tmp_config_trigger exch def
  % loop through all configuration options
  config.index.options get {
    % get id
    dup 0 get
    % check against id of option menu entry
    2 index eq {
      % this is the selected option
      dup 4 true put
      % get option trigger
      3 get
      /tmp_option_trigger exch def
    } {
      % this is not the selected option
      4 false put
    } ifelse
  } forall
  % remove option id from TOS
  pop

  % handle config trigger (if any)
  tmp_config_trigger "" ne {
    tmp_config_trigger get_configuration
    % loop through all configuration options
    config.index.options get {
      % get id
      dup 0 get
      % check against option trigger id
      tmp_option_trigger eq {
        % this is the selected option
        4 true put
      } {
        % this is not the selected option
        4 false put
      } ifelse
    } forall
  } if

  % restore selected index from breadcrumbs
  /menu.selected_index last_breadcrumb 2 get def

   % get previous menu from breadcrumbs
  last_breadcrumb
  /last_breadcrumb last_breadcrumb 0 get def
  free
  /menu.entries last_breadcrumb 1 get def
  
  % repaint menu 
  % !!! breadcrumbs must be updated before repainting the menu !!!
  paint_menu
  menu.selected_index menu.select

} def

% - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
% handles a submenu menu entry
%
% ( array -- )
%
% array: the selected submenu entry
%
/handle_submenu_entry {
  % update pointer to menu entries
  /menu.entries exch def

  % add submenu to breadcrumbs
  /last_breadcrumb [
    last_breadcrumb
    menu.entries
    menu.selected_index
  ] def

  % paint new submenu
  % !!! breadcrumbs must be updated before repainting the menu !!!
  paint_menu

  % select first index in submenu
  /menu.selected_index 0 def
  menu.selected_index menu.select
} def

% - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
% handles a back entry
%
% ( array -- )
%
% array: the selected back entry
%
/handle_back_entry {
  % there is nothing in the back entry that we need now...
  pop

  % restore selected index from breadcrumbs
  /menu.selected_index last_breadcrumb 2 get def
  
  % get previous menu from breadcrumbs
  last_breadcrumb
  /last_breadcrumb last_breadcrumb 0 get def
  free
  /menu.entries last_breadcrumb 1 get def
  
  % repaint menu 
  % !!! breadcrumbs must be updated before repainting the menu !!!
  paint_menu
  menu.selected_index menu.select
} def

% - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
% gets the x offset to center a string
%
% ( string -- int )
%
% string: the string to show centered
%
% int: the x value to center the string
%
/centered_x_value {
  strsize pop
  screen.size pop
  exch sub
  2 div
} def

% - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
% shows a text centered on screen
%
% ( int string -- )
%
% int: y value of the cursor position
% string: the string to show centered
%
/show_centered {
  dup centered_x_value
  rot moveto
  show
} def
 
% - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
% add highlight to menu item.
%
% ( int -- )
%
% int: the index to highlight
%
/menu.select {
  dup

  % move to menu position
  dup menu.entries menu.index.entries get exch get
  menu_to_text
  centered_x_value
  exch 1 add menu.dy mul menu.y add
  % keep position copy on stack so that we can jump back later
  1 index
  1 index
  moveto

  % paint text in highlighted color
  0x0000FF setcolor
  rot
  menu.entries menu.index.entries get exch get
  menu_to_text
  dup string_region_reset show
  % jump back
  moveto
 
  % paint highlight marker
  ">" dup strsize pop neg 10 sub 0 rmoveto
  show
} def

% - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
% remove highlight of menu item.
%
% ( int -- )
%
% int: the index where to remove the highlight
%
/menu.deselect {
  dup

  % move to menu position
  dup menu.entries menu.index.entries get exch get
  menu_to_text
  centered_x_value
  exch 1 add menu.dy mul menu.y add
  % keep position copy on stack so that we can jump back later
  1 index
  1 index
  moveto

  % paint text in normal color
  0x000000 setcolor
  rot
  menu.entries menu.index.entries get exch get
  menu_to_text
  dup string_region_reset show
  % jump back
  moveto
 
  % remove highlight marker
  ">" dup strsize pop neg 10 sub 0 rmoveto
  currentpoint rot strsize image
} def

% - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
% erases the currently shown menu from screen
%
% ( -- )
%
%
/menu.erase {
  % clear screen
  0 0 moveto
  0 0 image.size image

  % repaint version info
  "font_size_10.fnt" findfile setfont
  0x000000 setcolor
  version_info
  dup strsize exch pop
  screen.size exch pop
  exch sub
  10 sub
  10 exch
  moveto
  show
} def

% - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
% shows the image region of a string
%
% ( string -- )
%
% string: the string whose image region is repainted
%
/string_region_reset {
  currentpoint rot strsize image
} def

% - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
% gets a configuration by id
%
% ( string -- array )
%
% string: the configuration id
%
% array: the configuration
%
/get_configuration {
  configurations {
    dup config.index.id get
    2 index eq {
      % this is the config we were searching for
      % remove config id from stack
      exch pop
      return
    } {
      % this is another config...
      % just remove it from the stack
      pop
    } ifelse
  } forall
} def

% - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
% gets the textual representation of the selected option of a configuration
%
% ( array -- string )
%
% array: a configuration entry
%
% string: the textual representation of the selected option
%
/get_selected_option_text {
  % loop over all config options
  config.index.options get {
    % check, if option is selected
    dup 4 get {
      % selected option found, leave text on stack
      1 get return
    } {
      % option not selected, remove from stack
      pop
    } ifelse
  } forall
} def

% - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
% gets the textual representation of a menu entry
%
% ( array -- string )
%
% array: a menu entry
%
% string: the textual representation of the menu entry
%
/menu_to_text {
  % check menu entry type
  dup 0 get
  dup menu.type.start eq {
    pop
    % leave start menu text on stack
    1 get
  } {
    dup menu.type.config eq {
      pop
      % get configuration by id
      1 get get_configuration
      % get configuration text
      dup config.index.text get
      % show currently selected option
      ": " concatenate_strings
      exch
      get_selected_option_text
      concatenate_strings
    } {
      dup menu.type.option eq {
        pop
        % get option menu text
        3 get
      } {
        dup menu.type.menu eq {
          pop
          % get (sub)menu text
          menu.index.text get
        } {
          menu.type.back eq {
            % get back entry text
            1 get
          } if
        } ifelse
      } ifelse
    } ifelse
  } ifelse
} def

% - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
% paints a menu on screen
%
% ( -- )
%
/paint_menu {
  % reset screen
  menu.erase

  % determine breadcrumbs text
  ""
  last_breadcrumb
  {
    % get breadcrumb menu
    dup 1 get

    % get menu text
    1 get
    % concatenate
    rot
    dup "" eq {
      % this is the last breadcrumb
      % just leave its text on stack
      % and ignore the previous text
      pop
    }  {
      % this is not the last breadcrumb
      % put its text *in front* of the already existing
      % breadcrumbs text
      " > " exch concatenate_strings
      concatenate_strings
    } ifelse

    % move to previous breadcrumb
    exch 
    0 get
    dup 0 eq {
      % this is the first breadcrumb
      pop
      exit
    } if
  } loop

  % reset y_offset, color and font
  /y_offset menu.y def
  0x000000 setcolor
  menu.font findfile setfont

  % paint breadcrumbs text
  y_offset exch show_centered
  /y_offset y_offset menu.dy add def

  % paint all menu entries
  menu.entries menu.index.entries get {
    menu_to_text
    y_offset exch show_centered
    /y_offset y_offset menu.dy add def
  } forall
} def

% - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
% parse menu structure
%
% ( array1 -- array2 )
%
% array1: the menu definition in an xml structure
%
% array2: the parsed menu
%
% menus are arrays with the following fields:
%   0: type == menu.type.menu
%   1: text (string, the title of the menu) 
%   2: entries (array of start/config entries and/or other menus)
%
% start menu entries are arrays with the following fields:
%   0: type == menu.type.start
%   1: text (string, the text to display in the start menu)
%   2: index (string, the index in the syslinux config file to start)
%   3: label (string, the label in the syslinux config file to start)
%   4: append_config (bool, if the config should be appended to the label when booting)
%
% config menus are arrays with the following fields:
%   0: type == menu.type.config
%   1: id (string, config id)
%
% back entries are arrays with the following fields:
%   0: type == menu.type.back
%   1: text (string, the text to display in the menu)
%
/parse_menu {
  [
    exch
    % menu type
    menu.type.menu

    % menu text
    exch dup "text" get_attribute_value

    % menu entries
    exch
    [
      exch get_entity_children {
        dup gettype t_arr eq {
          % child is another entity
          % check, if entitiy is supported
          dup get_entity_name "start" eq {
            [
              exch
              menu.type.start
              exch dup "text" get_attribute_value
              exch dup "index" get_attribute_value string_to_int
              exch dup "label" get_attribute_value
              exch "append_config" get_attribute_value
              "true" eq {
                true
              } {
                false
              } ifelse
            ]
          } {
            dup get_entity_name "config" eq {
              [
                exch
                menu.type.config
                exch "id" get_attribute_value
              ]
            } {
              dup get_entity_name "menu" eq {
                % parse submenu (recursively)
                parse_menu
              } {
                dup get_entity_name "back" eq {
                  [
                    exch
                    menu.type.back
                    exch "text" get_attribute_value
                  ]
                } {
                  % entity is not supported
                  pop
                } ifelse
              } ifelse
            } ifelse
          } ifelse
        } {
          % child is just some text
          pop
        } ifelse
      } forall
    ]
  ]
} def

% set a good video mode and a splash screen
trymodes
paint_splash

% parse xml file
"xmlboot.config" findfile
parse_xml_file
/xml_structure exch def

% paint version info in the lower left screen corner
xml_structure "system" get_entity_child "version" get_attribute_value
/version_info exch def

% some config specifig constants
/config.index.id      0 def
/config.index.text    1 def
/config.index.trigger 2 def
/config.index.options 3 def

% get config options from XML structure
%
% configurations are arrays with the following fields:
%   0: id (string)
%   1: text (string)
%   2: trigger_config (string, another configuration that gets triggered)
%   3: options (array)
xml_structure "configs" get_entity_child
/xmlboot_config exch def
/configurations
[
  xmlboot_config get_entity_children {
    dup gettype t_arr eq {
      % child is another entity
      % check, if entitiy is supported
      dup get_entity_name "config" eq {
        [
          exch dup "id" get_attribute_value
          exch dup "text" get_attribute_value
          exch dup "trigger_config" get_attribute_value
          exch
          % parse all options
          [
            exch get_entity_children {
              dup gettype t_arr eq {
                dup get_entity_name "option" eq {
                  % configuration options are arrays with the following fields:
                  %   0: id (string)
                  %   1: text (string)
                  %   2: append (string)
                  %   3: trigger_option (string)
                  %   4: selected (boolean)
                  [
                    exch dup "id" get_attribute_value
                    exch dup "text" get_attribute_value
                    exch dup "append" get_attribute_value
                    exch dup "trigger_option" get_attribute_value
                    exch "selected" get_attribute_value "true" eq {
                      true
                    } {
                      false
                    } ifelse
                  ]
                } {
                  % entity is not supported
                  pop
                } ifelse
              } {
                % child is just some text
                pop
              } ifelse
            } forall
          ]
        ]
      } {
        % entity is not supported
        pop
      } ifelse
    } {
      % child is just some text
      pop
    } ifelse
  } forall
] def

% menu variables
/menu.selected_index 0 def
/menu.type.start  0 def
/menu.type.config 1 def
/menu.type.option 2 def
/menu.type.menu   3 def
/menu.type.back   4 def

% menu specifig indices
/menu.index.type    0 def
/menu.index.text    1 def
/menu.index.entries 2 def

% get menu from XML structure
%   
xml_structure "menu" get_entity_child
/xmlboot_menu exch def
/menu.font xmlboot_menu "font" get_attribute_value def
/menu.y xmlboot_menu "y" get_attribute_value string_to_int def
/menu.dy xmlboot_menu "dy" get_attribute_value string_to_int def
xmlboot_menu parse_menu
/menu.entries exch def
/main.menu menu.entries def

% support for breadcrumbs
% a breadrumb is an array with the following fields:
%   0: previous breadcrumb
%   1: this menu
%   2: the index of this menu in the previous menu
/last_breadcrumb [
  0
  main.menu
  0
] def

% paint menu texts
% !!! last_breadcrumb must already be defined for paint_menu to work !!!
paint_menu

% select first entry in menu list
menu.selected_index menu.select

% say we're fine ('false' tells bootloader not to use gfxboot)
true
